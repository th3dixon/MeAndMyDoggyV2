@{
    ViewData["Title"] = "Postcode Import";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h2>Postcode Data Import</h2>
            <p class="text-muted">Execute postcode import by running SQL files directly via SQLCMD (PostcodeInserts_001.sql to PostcodeInserts_106.sql)</p>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5>Import Configuration</h5>
                </div>
                <div class="card-body">
                    <form id="importForm">
                        <div class="mb-3">
                            <label for="connectionString" class="form-label">Database Connection String</label>
                            <textarea class="form-control" id="connectionString" rows="3" required
                                placeholder="Server=localhost;Database=YourDatabase;Integrated Security=true;TrustServerCertificate=true;"></textarea>
                            <div class="form-text">Enter your SQL Server connection string</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="filePath" class="form-label">Chunks Directory Path</label>
                            <input type="text" class="form-control" id="filePath" value="C:\temp\PostcodeChunks" required>
                            <div class="form-text">Path to directory containing PostcodeInserts_*.sql files</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Authentication Method</label>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="authMethod" id="windowsAuth" value="windows" checked>
                                <label class="form-check-label" for="windowsAuth">
                                    Windows Authentication
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="authMethod" id="sqlAuth" value="sql">
                                <label class="form-check-label" for="sqlAuth">
                                    SQL Server Authentication
                                </label>
                            </div>
                        </div>

                        <div id="sqlAuthFields" style="display: none;">
                            <div class="mb-3">
                                <label for="username" class="form-label">Username</label>
                                <input type="text" class="form-control" id="username" placeholder="sa">
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <input type="password" class="form-control" id="password" placeholder="Your SQL Server password">
                            </div>
                        </div>

                        <div class="alert alert-warning" role="alert">
                            <strong>Warning:</strong> This will execute 106 SQL files sequentially via SQLCMD to import approximately 2.6 million postcode records. 
                            The process may take 2-4 hours to complete. Ensure the PostcodeImportStaging table exists in your database and SQLCMD is available on the server.
                        </div>

                        <button type="submit" class="btn btn-primary" id="startImportBtn">
                            <i class="fas fa-play"></i> Start Import
                        </button>
                        <button type="button" class="btn btn-secondary" id="cancelImportBtn" style="display: none;">
                            <i class="fas fa-stop"></i> Cancel
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h6>Import Progress</h6>
                </div>
                <div class="card-body">
                    <div id="progressContainer" style="display: none;">
                        <div class="progress mb-3">
                            <div class="progress-bar" id="progressBar" role="progressbar" style="width: 0%"></div>
                        </div>
                        <div id="progressText">Preparing import...</div>
                        <div id="currentChunk" class="text-muted small"></div>
                    </div>
                    <div id="summaryContainer" style="display: none;">
                        <h6>Import Summary</h6>
                        <div id="summaryContent"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h6>Import Log</h6>
                </div>
                <div class="card-body">
                    <div id="importLog" style="height: 400px; overflow-y: auto; background-color: #f8f9fa; padding: 15px; font-family: monospace; font-size: 12px;">
                        Ready to start import...
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('importForm');
    const startBtn = document.getElementById('startImportBtn');
    const cancelBtn = document.getElementById('cancelImportBtn');
    const progressContainer = document.getElementById('progressContainer');
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    const currentChunk = document.getElementById('currentChunk');
    const summaryContainer = document.getElementById('summaryContainer');
    const summaryContent = document.getElementById('summaryContent');
    const importLog = document.getElementById('importLog');
    const sqlAuthFields = document.getElementById('sqlAuthFields');
    const authRadios = document.querySelectorAll('input[name="authMethod"]');

    let isImporting = false;

    // Handle authentication method change
    authRadios.forEach(radio => {
        radio.addEventListener('change', function() {
            if (this.value === 'sql') {
                sqlAuthFields.style.display = 'block';
            } else {
                sqlAuthFields.style.display = 'none';
            }
        });
    });

    function addLogEntry(message, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        const colorClass = type === 'error' ? 'text-danger' : type === 'success' ? 'text-success' : 'text-info';
        importLog.innerHTML += `<div class="${colorClass}">[${timestamp}] ${message}</div>`;
        importLog.scrollTop = importLog.scrollHeight;
    }

    function updateProgress(current, total, message = '') {
        const percent = (current / total) * 100;
        progressBar.style.width = `${percent}%`;
        progressBar.textContent = `${Math.round(percent)}%`;
        progressText.textContent = `Progress: ${current}/${total} chunks completed`;
        if (message) {
            currentChunk.textContent = message;
        }
    }

    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (isImporting) return;
        
        const connectionString = document.getElementById('connectionString').value;
        const filePath = document.getElementById('filePath').value;
        const authMethod = document.querySelector('input[name="authMethod"]:checked').value;
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        
        if (!connectionString.trim()) {
            alert('Please enter a connection string');
            return;
        }

        if (authMethod === 'sql' && (!username.trim() || !password.trim())) {
            alert('Please enter both username and password for SQL Server authentication');
            return;
        }

        isImporting = true;
        startBtn.style.display = 'none';
        cancelBtn.style.display = 'inline-block';
        progressContainer.style.display = 'block';
        summaryContainer.style.display = 'none';
        
        addLogEntry('Starting postcode import...', 'info');
        addLogEntry(`Connection String: ${connectionString}`, 'info');
        addLogEntry(`File Path: ${filePath}`, 'info');
        
        try {
            const formData = new FormData();
            formData.append('connectionString', connectionString);
            formData.append('filePath', filePath);
            
            if (authMethod === 'sql') {
                formData.append('username', username);
                formData.append('password', password);
            }

            const response = await fetch('/PostcodeImport/ExecuteImport', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                addLogEntry('Import completed successfully!', 'success');
                updateProgress(result.totalChunks, result.totalChunks, 'Import completed');
                
                summaryContent.innerHTML = `
                    <div class="alert alert-success">
                        <strong>Import Successful!</strong><br>
                        Total Chunks: ${result.totalChunks}<br>
                        Successful: ${result.successCount}<br>
                        Failed: ${result.errorCount}<br>
                        Total Records: ${result.totalRecords?.toLocaleString() || 'Unknown'}
                    </div>
                `;
            } else {
                addLogEntry(`Import failed: ${result.message}`, 'error');
                summaryContent.innerHTML = `
                    <div class="alert alert-danger">
                        <strong>Import Failed!</strong><br>
                        ${result.message}
                    </div>
                `;
            }

            // Display detailed results
            if (result.results) {
                addLogEntry('Detailed chunk results:', 'info');
                result.results.forEach(chunk => {
                    const type = chunk.status === 'success' ? 'success' : 'error';
                    addLogEntry(`Chunk ${chunk.chunk}: ${chunk.message}`, type);
                    updateProgress(chunk.chunk, result.totalChunks, `Processing chunk ${chunk.chunk}`);
                });
            }

            summaryContainer.style.display = 'block';

        } catch (error) {
            addLogEntry(`Fatal error: ${error.message}`, 'error');
            summaryContent.innerHTML = `
                <div class="alert alert-danger">
                    <strong>Fatal Error!</strong><br>
                    ${error.message}
                </div>
            `;
            summaryContainer.style.display = 'block';
        } finally {
            isImporting = false;
            startBtn.style.display = 'inline-block';
            cancelBtn.style.display = 'none';
        }
    });

    cancelBtn.addEventListener('click', function() {
        if (confirm('Are you sure you want to cancel the import?')) {
            addLogEntry('Import cancelled by user', 'info');
            isImporting = false;
            startBtn.style.display = 'inline-block';
            cancelBtn.style.display = 'none';
            progressContainer.style.display = 'none';
        }
    });
});
</script>