@{
    ViewData["Title"] = "Dashboard";
    ViewData["Description"] = "Your personalized pet care dashboard";
}

@section Head {
    <!-- SortableJS for drag and drop -->
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    
    <style>
        :root {
            --pet-orange: #F97316;
            --pet-orange-light: #FB923C;
            --pet-orange-dark: #EA580C;
            --pet-blue: #3B82F6;
            --pet-green: #10B981;
            --pet-purple: #8B5CF6;
            --pet-pink: #EC4899;
        }
        
        .widget-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }
        
        .widget-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 20px 35px rgba(0, 0, 0, 0.1);
        }
        
        .widget-card.compact {
            min-height: auto;
        }
        
        .widget-card.expanded {
            min-height: 300px;
        }
        
        /* Drag and Drop Styles */
        .widget-card.sortable-drag {
            transform: rotate(5deg);
            opacity: 0.8;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
        }
        
        .widget-card.sortable-ghost {
            opacity: 0.4;
            background: linear-gradient(45deg, var(--pet-orange), var(--pet-pink));
        }
        
        .widget-header {
            display: flex;
            align-items: center;
            justify-content: between;
            padding: 0.5rem;
            cursor: move;
        }
        
        .widget-header:hover {
            background: rgba(249, 115, 22, 0.05);
        }
        
        /* Theme Styles */
        .theme-light {
            --bg-primary: #ffffff;
            --bg-secondary: #f8fafc;
            --text-primary: #1f2937;
            --text-secondary: #6b7280;
        }
        
        .theme-dark {
            --bg-primary: #1f2937;
            --bg-secondary: #111827;
            --text-primary: #f9fafb;
            --text-secondary: #d1d5db;
        }
        
        .theme-pet {
            --bg-primary: linear-gradient(135deg, #fef3c7, #fde68a);
            --bg-secondary: #fef3c7;
            --text-primary: #92400e;
            --text-secondary: #d97706;
        }
        
        /* Advanced Animation Classes */
        .animate-bounce-subtle {
            animation: bounce-subtle 2s infinite;
        }
        
        @@keyframes bounce-subtle {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-2px); }
        }
        
        .animate-pulse-glow {
            animation: pulse-glow 2s infinite;
        }
        
        @@keyframes pulse-glow {
            0%, 100% { box-shadow: 0 0 0 rgba(249, 115, 22, 0); }
            50% { box-shadow: 0 0 20px rgba(249, 115, 22, 0.2); }
        }
        
        .animate-slide-up {
            animation: slide-up 0.5s ease-out;
        }
        
        @@keyframes slide-up {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* Widget Controls */
        .widget-controls {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            opacity: 0;
            transition: opacity 0.2s;
        }
        
        .widget-card:hover .widget-controls {
            opacity: 1;
        }
        
        .widget-control-btn {
            background: rgba(255, 255, 255, 0.9);
            border: none;
            border-radius: 50%;
            width: 28px;
            height: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-left: 0.25rem;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .widget-control-btn:hover {
            background: var(--pet-orange);
            color: white;
            transform: scale(1.1);
        }
        
        /* === PHASE 2: ENHANCED MICROINTERACTIONS === */
        
        /* Advanced Hover Effects with Depth */
        .widget-card {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            transform-style: preserve-3d;
        }
        
        .widget-card:hover {
            transform: translateY(-4px);
            box-shadow: 
                0 20px 25px -5px rgba(0, 0, 0, 0.1),
                0 10px 10px -5px rgba(0, 0, 0, 0.04),
                0 0 0 1px rgba(249, 115, 22, 0.05);
        }
        
        .widget-card:active {
            transform: translateY(-2px);
            transition-duration: 0.1s;
        }
        
        /* Interactive Icons with Bounce */
        .interactive-icon {
            transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            transform-origin: center;
        }
        
        .interactive-icon:hover {
            transform: scale(1.2) rotate(10deg);
            color: #f97316;
            filter: drop-shadow(0 2px 8px rgba(249, 115, 22, 0.3));
        }
        
        /* Morphing Buttons */
        .morph-button {
            transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            position: relative;
            overflow: hidden;
        }
        
        .morph-button:before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }
        
        .morph-button:hover:before {
            left: 100%;
        }
        
        /* Success Ripple Effect */
        .ripple-effect {
            position: relative;
            overflow: hidden;
        }
        
        .ripple-effect:after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-radius: 50%;
            background: rgba(34, 197, 94, 0.3);
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }
        
        .ripple-effect.success:after {
            width: 300px;
            height: 300px;
        }
        
        /* === PHASE 2: ENHANCED LOADING ANIMATIONS === */
        
        /* Skeleton Loading */
        .skeleton-loader {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: shimmer 1.5s infinite;
            border-radius: 8px;
        }
        
        @@keyframes shimmer {
            0% { background-position: -200% 0; }
            100% { background-position: 200% 0; }
        }
        
        /* Pulse Loading with Breathing Effect */
        .pulse-breathing {
            animation: pulse-breathing 2s ease-in-out infinite;
        }
        
        @@keyframes pulse-breathing {
            0%, 100% { 
                opacity: 0.6; 
                transform: scale(1);
            }
            50% { 
                opacity: 1; 
                transform: scale(1.05);
            }
        }
        
        /* Spinning Loader with Gradient */
        .gradient-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #f97316;
            border-radius: 50%;
            animation: gradient-spin 1s linear infinite;
            position: relative;
        }
        
        .gradient-spinner:after {
            content: '';
            position: absolute;
            top: -4px;
            left: -4px;
            right: -4px;
            bottom: -4px;
            border: 4px solid transparent;
            border-top: 4px solid rgba(249, 115, 22, 0.3);
            border-radius: 50%;
            animation: gradient-spin 2s linear infinite reverse;
        }
        
        @@keyframes gradient-spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Dots Loader */
        .dots-loader {
            display: inline-block;
            position: relative;
            width: 80px;
            height: 80px;
        }
        
        .dots-loader div {
            position: absolute;
            top: 33px;
            width: 13px;
            height: 13px;
            border-radius: 50%;
            background: #f97316;
            animation-timing-function: cubic-bezier(0, 1, 1, 0);
        }
        
        .dots-loader div:nth-child(1) {
            left: 8px;
            animation: dots1 0.6s infinite;
        }
        
        .dots-loader div:nth-child(2) {
            left: 8px;
            animation: dots2 0.6s infinite;
        }
        
        .dots-loader div:nth-child(3) {
            left: 32px;
            animation: dots2 0.6s infinite;
        }
        
        .dots-loader div:nth-child(4) {
            left: 56px;
            animation: dots3 0.6s infinite;
        }
        
        @@keyframes dots1 {
            0% { transform: scale(0); }
            100% { transform: scale(1); }
        }
        
        @@keyframes dots3 {
            0% { transform: scale(1); }
            100% { transform: scale(0); }
        }
        
        @@keyframes dots2 {
            0% { transform: translate(0, 0); }
            100% { transform: translate(24px, 0); }
        }
        
        /* === PHASE 3: WEATHER-RESPONSIVE UI === */
        
        .weather-rainy {
            background: linear-gradient(to bottom, #4a5568, #2d3748);
            color: #e2e8f0;
        }
        
        .weather-rainy .widget-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .weather-snowy {
            background: linear-gradient(to bottom, #f7fafc, #edf2f7);
        }
        
        .weather-snowy .widget-card {
            background: rgba(255, 255, 255, 0.9);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
        }
        
        .weather-hot {
            background: linear-gradient(to bottom, #fed7d7, #feb2b2);
        }
        
        .weather-hot .widget-card {
            background: rgba(255, 255, 255, 0.95);
            border: 1px solid rgba(245, 101, 101, 0.1);
        }
        
        .weather-cold {
            background: linear-gradient(to bottom, #e6fffa, #b2f5ea);
        }
        
        .weather-cold .widget-card {
            background: rgba(255, 255, 255, 0.95);
            border: 1px solid rgba(49, 151, 149, 0.1);
        }
        
        .weather-pleasant .widget-card {
            background: rgba(255, 255, 255, 0.98);
        }
        
        .hero-pattern {
            background-image: radial-gradient(circle at 25% 25%, rgba(249, 115, 22, 0.1) 0%, transparent 50%),
                            radial-gradient(circle at 75% 75%, rgba(59, 130, 246, 0.1) 0%, transparent 50%);
        }
        
        .paw-print {
            position: absolute;
            width: 30px;
            height: 30px;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23F97316' opacity='0.1'%3E%3Cpath d='M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2M21 9V7L15 13L13.5 7.5C13.1 6.1 11.9 5 10.5 5S7.9 6.1 7.5 7.5L6 13L0 7V9L6.5 15.5L8.5 8.5C8.6 8.1 9 7.8 9.5 7.8S10.4 8.1 10.5 8.5L12.5 15.5L19 9M7.5 16C6.1 16 5 17.1 5 18.5S6.1 21 7.5 21S10 19.9 10 18.5S8.9 16 7.5 16M16.5 16C15.1 16 14 17.1 14 18.5S15.1 21 16.5 21S19 19.9 19 18.5S17.9 16 16.5 16Z'/%3E%3C/svg%3E");
            animation: float 4s ease-in-out infinite;
        }
        
        @@keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
        }
        
        .fade-in {
            animation: fadeIn 0.6s ease-in;
        }
        
        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }
        
        @@keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
}

<div x-data="dashboard()" x-init="init()" class="bg-gradient-to-br from-orange-50 to-blue-50 min-h-screen">
    <!-- Background Pattern -->
    <div class="absolute inset-0 hero-pattern"></div>
    <div class="paw-print top-20 left-10 opacity-20"></div>
    <div class="paw-print top-32 right-20 opacity-20" style="animation-delay: 1s;"></div>
    <div class="paw-print bottom-20 left-32 opacity-20" style="animation-delay: 2s;"></div>

    <!-- Main Content -->
    <main class="pt-8 pb-8 relative">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="mb-8 fade-in">
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                    <div>
                        <h1 class="text-3xl font-display font-bold text-gray-900">
                            Good <span x-text="getTimeOfDay()"></span>, @(User.Identity?.IsAuthenticated == true ? User.Identity.Name : "Friend")! 👋
                        </h1>
                        <p class="text-gray-600 mt-1">Here's what's happening with your furry friends today</p>
                    </div>
                    <div class="mt-4 sm:mt-0 flex items-center space-x-3">
                        <!-- Personalization Controls -->
                        <div class="flex items-center bg-white/80 backdrop-blur-sm rounded-xl p-2 border border-white/20">
                            <!-- Theme Toggle -->
                            <div class="flex items-center space-x-1">
                                <button @@click="cycleTheme()" 
                                        class="w-8 h-8 rounded-lg flex items-center justify-center hover:bg-pet-orange/10 transition-colors morph-button interactive-icon ripple-effect"
                                        :class="getThemeIconClass()"
                                        x-title="Change theme">
                                    <i :class="getThemeIcon()" class="text-sm"></i>
                                </button>
                                
                                <!-- Widget Size Toggle -->
                                <button @@click="toggleWidgetSize()" 
                                        class="w-8 h-8 rounded-lg flex items-center justify-center hover:bg-pet-orange/10 transition-colors morph-button interactive-icon"
                                        x-title="Toggle widget size">
                                    <i :class="widgetSize === 'compact' ? 'fas fa-expand-alt' : 'fas fa-compress-alt'" class="text-sm text-gray-600"></i>
                                </button>
                                
                                <!-- Edit Mode Toggle -->
                                <button @@click="toggleEditMode()" 
                                        class="w-8 h-8 rounded-lg flex items-center justify-center hover:bg-pet-orange/10 transition-colors morph-button interactive-icon ripple-effect"
                                        :class="{ 'bg-pet-orange text-white': editMode, 'text-gray-600': !editMode }"
                                        x-title="Customize widgets">
                                    <i class="fas fa-edit text-sm"></i>
                                </button>
                            </div>
                        </div>
                        
                        <button @@click="showQuickActions = true" class="bg-pet-orange text-white px-6 py-3 rounded-xl font-medium hover:bg-orange-600 transition-colors shadow-lg animate-pulse-glow morph-button ripple-effect">
                            <i class="fas fa-bolt mr-2 interactive-icon"></i>Quick Actions
                        </button>
                    </div>
                </div>
            </div>

            <!-- Quick Stats -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8" id="quick-stats-container">
                <!-- My Pets Card -->
                <div class="widget-card rounded-2xl p-6 fade-in animate-slide-up" 
                     :class="[widgetSize, { 'animate-bounce-subtle': editMode }]"
                     data-widget-id="pets-count" 
                     x-show="!hiddenWidgets.includes('pets-count')">
                    
                    <!-- Widget Controls -->
                    <div class="widget-controls" x-show="editMode">
                        <button @@click="toggleWidget('pets-count')" class="widget-control-btn">
                            <i class="fas fa-eye-slash text-xs"></i>
                        </button>
                    </div>
                    
                    <!-- Widget Header (draggable) -->
                    <div class="widget-header" x-show="editMode">
                        <i class="fas fa-grip-vertical text-gray-400 mr-2"></i>
                        <span class="text-sm font-medium text-gray-600">My Pets Widget</span>
                    </div>
                    
                    <!-- Widget Content -->
                    <div class="flex items-center" :class="{ 'pt-2': editMode }">
                        <div class="p-3 bg-pet-orange/10 rounded-xl">
                            <i class="fas fa-dog text-pet-orange text-2xl"></i>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">My Pets</p>
                            <p class="text-2xl font-bold text-gray-900">
                                <span x-show="!loading.quickStats" x-text="quickStats.petCount"></span>
                                <div x-show="loading.quickStats" class="loading-spinner"></div>
                            </p>
                        </div>
                    </div>
                </div>

                <!-- Upcoming Services Card -->
                <div class="widget-card rounded-2xl p-6 fade-in animate-slide-up" 
                     :class="[widgetSize, { 'animate-bounce-subtle': editMode }]"
                     data-widget-id="upcoming-services-count" 
                     x-show="!hiddenWidgets.includes('upcoming-services-count')"
                     style="animation-delay: 0.1s;">
                    
                    <div class="widget-controls" x-show="editMode">
                        <button @@click="toggleWidget('upcoming-services-count')" class="widget-control-btn">
                            <i class="fas fa-eye-slash text-xs"></i>
                        </button>
                    </div>
                    
                    <div class="widget-header" x-show="editMode">
                        <i class="fas fa-grip-vertical text-gray-400 mr-2"></i>
                        <span class="text-sm font-medium text-gray-600">Upcoming Services Widget</span>
                    </div>
                    
                    <div class="flex items-center" :class="{ 'pt-2': editMode }">
                        <div class="p-3 bg-blue-100 rounded-xl">
                            <i class="fas fa-calendar-check text-blue-600 text-2xl"></i>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Upcoming Services</p>
                            <p class="text-2xl font-bold text-gray-900">
                                <span x-show="!loading.quickStats" x-text="quickStats.upcomingServices"></span>
                                <div x-show="loading.quickStats" class="loading-spinner"></div>
                            </p>
                        </div>
                    </div>
                </div>

                <!-- Reviews Card -->
                <div class="widget-card rounded-2xl p-6 fade-in animate-slide-up" 
                     :class="[widgetSize, { 'animate-bounce-subtle': editMode }]"
                     data-widget-id="average-rating" 
                     x-show="!hiddenWidgets.includes('average-rating')"
                     style="animation-delay: 0.2s;">
                    
                    <div class="widget-controls" x-show="editMode">
                        <button @@click="toggleWidget('average-rating')" class="widget-control-btn">
                            <i class="fas fa-eye-slash text-xs"></i>
                        </button>
                    </div>
                    
                    <div class="widget-header" x-show="editMode">
                        <i class="fas fa-grip-vertical text-gray-400 mr-2"></i>
                        <span class="text-sm font-medium text-gray-600">Rating Widget</span>
                    </div>
                    
                    <div class="flex items-center" :class="{ 'pt-2': editMode }">
                        <div class="p-3 bg-green-100 rounded-xl">
                            <i class="fas fa-star text-green-600 text-2xl"></i>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Average Rating</p>
                            <p class="text-2xl font-bold text-gray-900">
                                <span x-show="!loading.quickStats" x-text="quickStats.averageRating"></span>
                                <div x-show="loading.quickStats" class="loading-spinner"></div>
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Main Dashboard Grid -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <!-- Left Column -->
                <div class="lg:col-span-2 space-y-8">
                    <!-- Upcoming Services -->
                    <div class="widget-card rounded-2xl p-6 fade-in">
                        <div class="flex items-center justify-between mb-6">
                            <h2 class="text-xl font-display font-semibold text-gray-900">Upcoming Services</h2>
                            <a href="/Search" class="text-pet-orange hover:text-orange-600 font-medium">View All</a>
                        </div>
                        
                        <div x-show="loading.upcomingServices" class="text-center py-8">
                            <div class="loading-spinner mx-auto"></div>
                            <p class="text-gray-500 mt-2">Loading services...</p>
                        </div>
                        
                        <div x-show="!loading.upcomingServices && upcomingServices.length > 0" class="space-y-4">
                            <template x-for="service in upcomingServices" :key="service.id">
                                <div class="border border-gray-200 rounded-xl p-4 hover:border-pet-orange/50 transition-colors morph-button">
                                    <div class="flex items-start justify-between">
                                        <div class="flex items-start space-x-4">
                                            <div class="relative">
                                                <img :src="service.providerImage" :alt="service.providerName" class="w-12 h-12 rounded-full object-cover">
                                                <div class="absolute -bottom-1 -right-1 w-4 h-4 bg-white rounded-full flex items-center justify-center">
                                                    <i :class="service.serviceCategoryIcon" class="text-xs text-pet-orange"></i>
                                                </div>
                                            </div>
                                            <div class="flex-1">
                                                <div class="flex items-center space-x-2 mb-1">
                                                    <h3 class="font-semibold text-gray-900" x-text="service.serviceName"></h3>
                                                    <span class="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium" 
                                                          x-text="service.serviceCategory"></span>
                                                </div>
                                                <div class="flex items-center space-x-2 text-sm text-gray-600 mb-2">
                                                    <span>with</span>
                                                    <span class="font-medium" x-text="service.providerName"></span>
                                                    <div x-show="service.providerRating > 0" class="flex items-center space-x-1">
                                                        <i class="fas fa-star text-yellow-400 text-xs"></i>
                                                        <span class="text-xs font-medium" x-text="service.providerRating"></span>
                                                    </div>
                                                </div>
                                                <div class="flex items-center space-x-4 text-sm text-gray-500">
                                                    <div class="flex items-center space-x-1">
                                                        <i class="far fa-calendar text-xs"></i>
                                                        <span x-text="service.date"></span>
                                                    </div>
                                                    <div class="flex items-center space-x-1">
                                                        <i class="far fa-clock text-xs"></i>
                                                        <span x-text="service.time"></span>
                                                        <span x-show="service.duration">(<span x-text="service.duration"></span>min)</span>
                                                    </div>
                                                    <div x-show="service.pet" class="flex items-center space-x-1">
                                                        <i class="fas fa-paw text-xs"></i>
                                                        <span x-text="service.pet"></span>
                                                        <span x-show="service.petBreed" class="text-xs">(<span x-text="service.petBreed"></span>)</span>
                                                    </div>
                                                </div>
                                                <div x-show="service.price" class="mt-2">
                                                    <span class="text-sm font-medium text-green-600">£<span x-text="service.price"></span></span>
                                                    <span x-show="service.location" class="ml-2 text-xs text-gray-500">• <span x-text="service.location"></span></span>
                                                </div>
                                                <div x-show="service.notes" class="mt-2 p-2 bg-yellow-50 border-l-4 border-yellow-400 rounded">
                                                    <p class="text-sm text-yellow-800" x-text="service.notes"></p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="flex flex-col space-y-2">
                                            <button class="p-2 text-gray-400 hover:text-pet-orange transition-colors interactive-icon" 
                                                    title="Message provider">
                                                <i class="fas fa-comment text-sm"></i>
                                            </button>
                                            <button class="p-2 text-gray-400 hover:text-blue-600 transition-colors interactive-icon"
                                                    title="Edit booking">
                                                <i class="fas fa-edit text-sm"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </template>
                        </div>
                        
                        <div x-show="!loading.upcomingServices && upcomingServices.length === 0" class="text-center py-8">
                            <i class="fas fa-calendar-plus text-gray-300 text-4xl mb-4"></i>
                            <p class="text-gray-500">No upcoming services scheduled</p>
                            <a href="/Search" class="mt-4 inline-block bg-pet-orange text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition-colors">
                                Book a Service
                            </a>
                        </div>
                    </div>

                    <!-- Recent Activity -->
                    <div class="widget-card rounded-2xl p-6 fade-in animate-slide-up" 
                         :class="[widgetSize, { 'animate-bounce-subtle': editMode }]"
                         data-widget-id="recent-activity" 
                         x-show="!hiddenWidgets.includes('recent-activity')"
                         style="animation-delay: 0.4s;">
                         
                        <div class="widget-controls" x-show="editMode">
                            <button @@click="toggleWidget('recent-activity')" class="widget-control-btn">
                                <i class="fas fa-eye-slash text-xs"></i>
                            </button>
                        </div>
                        
                        <div class="widget-header" x-show="editMode">
                            <i class="fas fa-grip-vertical text-gray-400 mr-2"></i>
                            <span class="text-sm font-medium text-gray-600">Recent Activity Widget</span>
                        </div>
                        
                        <div class="flex items-center justify-between mb-6" :class="{ 'pt-2': editMode }">
                            <h2 class="text-xl font-display font-semibold text-gray-900">Recent Activity</h2>
                            <a href="#" class="text-pet-orange hover:text-orange-600 font-medium">View All</a>
                        </div>
                        
                        <div x-show="loading.recentActivity" class="text-center py-8">
                            <div class="loading-spinner mx-auto"></div>
                            <p class="text-gray-500 mt-2">Loading activity...</p>
                        </div>
                        
                        <div x-show="!loading.recentActivity" class="space-y-4">
                            <template x-for="activity in recentActivity" :key="activity.id">
                                <div class="flex items-start space-x-3 p-3 hover:bg-gray-50 rounded-lg transition-colors morph-button">
                                    <div class="flex-shrink-0">
                                        <div :class="activity.iconClass" class="w-8 h-8 rounded-full flex items-center justify-center interactive-icon">
                                            <i :class="activity.icon" class="text-sm"></i>
                                        </div>
                                    </div>
                                    <div class="flex-1">
                                        <p class="text-sm text-gray-900 font-medium" x-text="activity.message"></p>
                                        <p x-show="activity.detail" class="text-xs text-gray-600 mt-1" x-text="activity.detail"></p>
                                        <div class="flex items-center justify-between mt-2">
                                            <p class="text-xs text-gray-500" x-text="activity.timestamp"></p>
                                            <span :class="activity.type === 'service_completed' ? 'bg-green-100 text-green-800' :
                                                          activity.type === 'medical_record' ? 'bg-blue-100 text-blue-800' :
                                                          activity.type === 'health_action' ? 'bg-red-100 text-red-800' :
                                                          activity.type === 'review_posted' ? 'bg-yellow-100 text-yellow-800' :
                                                          'bg-gray-100 text-gray-800'"
                                                  class="px-2 py-1 rounded-full text-xs font-medium"
                                                  x-text="activity.type.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())">
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </template>
                        </div>
                    </div>
                </div>

                <!-- Right Column -->
                <div class="space-y-8">
                    <!-- My Pets Widget -->
                    <div class="widget-card rounded-2xl p-6 fade-in animate-slide-up" 
                         :class="[widgetSize, { 'animate-bounce-subtle': editMode }]"
                         data-widget-id="my-pets" 
                         x-show="!hiddenWidgets.includes('my-pets')"
                         style="animation-delay: 0.5s;">
                         
                        <div class="widget-controls" x-show="editMode">
                            <button @@click="toggleWidget('my-pets')" class="widget-control-btn">
                                <i class="fas fa-eye-slash text-xs"></i>
                            </button>
                        </div>
                        
                        <div class="widget-header" x-show="editMode">
                            <i class="fas fa-grip-vertical text-gray-400 mr-2"></i>
                            <span class="text-sm font-medium text-gray-600">My Pets Widget</span>
                        </div>
                        
                        <div class="flex items-center justify-between mb-6" :class="{ 'pt-2': editMode }">
                            <h2 class="text-xl font-display font-semibold text-gray-900">My Pets</h2>
                            <button class="text-pet-orange hover:text-orange-600">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        
                        <div x-show="loading.pets" class="text-center py-8">
                            <div class="gradient-spinner mx-auto"></div>
                            <p class="text-gray-500 mt-2 pulse-breathing">Loading pets...</p>
                        </div>
                        
                        <div x-show="!loading.pets" class="space-y-4">
                            <template x-for="pet in pets" :key="pet.id">
                                <div class="flex items-start space-x-3 p-3 hover:bg-gray-50 rounded-lg transition-colors cursor-pointer morph-button ripple-effect">
                                    <img :src="pet.image" :alt="pet.name" class="w-12 h-12 rounded-full object-cover">
                                    <div class="flex-1">
                                        <div class="flex items-center justify-between mb-1">
                                            <h3 class="font-semibold text-gray-900" x-text="pet.name"></h3>
                                            <div x-show="pet.healthScore" class="flex items-center space-x-1">
                                                <div class="w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold"
                                                     :class="pet.healthScore >= 80 ? 'bg-green-100 text-green-800' : 
                                                             pet.healthScore >= 60 ? 'bg-yellow-100 text-yellow-800' : 
                                                             'bg-red-100 text-red-800'"
                                                     x-text="pet.healthScore">
                                                </div>
                                            </div>
                                        </div>
                                        <p class="text-sm text-gray-600 mb-2">
                                            <span x-text="pet.breed"></span> • <span x-text="pet.age"></span>
                                            <span x-show="pet.weight"> • <span x-text="pet.weight"></span>kg</span>
                                        </p>
                                        <div class="flex items-center justify-between">
                                            <div class="flex items-center space-x-2">
                                                <div :class="pet.healthStatus === 'Excellent' ? 'bg-green-100 text-green-800' : 
                                                             pet.healthStatus === 'Good' ? 'bg-blue-100 text-blue-800' : 
                                                             pet.healthStatus === 'Checkup Due' ? 'bg-yellow-100 text-yellow-800' :
                                                             pet.healthStatus === 'Needs Attention' ? 'bg-red-100 text-red-800' :
                                                             'bg-gray-100 text-gray-800'" 
                                                     class="px-2 py-1 rounded-full text-xs font-medium" 
                                                     x-text="pet.healthStatus">
                                                </div>
                                                <div x-show="pet.vaccinationStatus" 
                                                     :class="pet.vaccinationStatus === 'Up to date' ? 'bg-green-100 text-green-800' : 
                                                             pet.vaccinationStatus === 'Due soon' ? 'bg-yellow-100 text-yellow-800' :
                                                             'bg-red-100 text-red-800'" 
                                                     class="px-2 py-1 rounded-full text-xs font-medium">
                                                    <i class="fas fa-syringe mr-1"></i>
                                                    <span x-text="pet.vaccinationStatus"></span>
                                                </div>
                                            </div>
                                            <div x-show="pet.pendingHealthActions > 0" 
                                                 class="flex items-center text-xs text-orange-600">
                                                <i class="fas fa-exclamation-triangle mr-1"></i>
                                                <span x-text="pet.pendingHealthActions"></span> pending
                                            </div>
                                        </div>
                                        <div x-show="pet.lastCheckupFormatted" class="mt-2 text-xs text-gray-500">
                                            Last checkup: <span x-text="pet.lastCheckupFormatted"></span>
                                        </div>
                                    </div>
                                </div>
                            </template>
                        </div>
                    </div>

                    <!-- Weather Widget -->
                    <div class="widget-card rounded-2xl p-6 fade-in animate-slide-up" 
                         :class="[widgetSize, { 'animate-bounce-subtle': editMode }]"
                         data-widget-id="weather" 
                         x-show="!hiddenWidgets.includes('weather')"
                         style="animation-delay: 0.6s;">
                         
                        <div class="widget-controls" x-show="editMode">
                            <button @@click="toggleWidget('weather')" class="widget-control-btn">
                                <i class="fas fa-eye-slash text-xs"></i>
                            </button>
                        </div>
                        
                        <div class="widget-header" x-show="editMode">
                            <i class="fas fa-grip-vertical text-gray-400 mr-2"></i>
                            <span class="text-sm font-medium text-gray-600">Weather Widget</span>
                        </div>
                        
                        <div class="flex items-center justify-between mb-4" :class="{ 'pt-2': editMode }">
                            <h2 class="text-lg font-display font-semibold text-gray-900">Weather & Pet Care</h2>
                            <div x-show="!loading.weather" class="text-right">
                                <div class="text-2xl font-bold text-gray-900"><span x-text="weather.temperature"></span>°C</div>
                                <div class="text-sm text-gray-600" x-text="weather.location"></div>
                            </div>
                            <div x-show="loading.weather" class="loading-spinner"></div>
                        </div>
                        
                        <div x-show="!loading.weather" class="flex items-center space-x-3 mb-4">
                            <i :class="weather.icon" class="text-2xl text-blue-500"></i>
                            <div>
                                <p class="font-medium text-gray-900" x-text="weather.condition"></p>
                                <p class="text-sm text-gray-600">Feels like <span x-text="weather.feelsLike"></span>°C</p>
                            </div>
                        </div>
                        
                        <div x-show="!loading.weather" class="bg-blue-50 border border-blue-200 rounded-lg p-3">
                            <div class="flex items-start space-x-2">
                                <i class="fas fa-lightbulb text-blue-600 mt-1"></i>
                                <div>
                                    <p class="text-sm font-medium text-blue-900">Pet Care Tip</p>
                                    <p class="text-sm text-blue-800" x-text="weather.petTip"></p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Quick Health Reminders -->
                    <div class="widget-card rounded-2xl p-6 fade-in animate-slide-up" 
                         :class="[widgetSize, { 'animate-bounce-subtle': editMode }]"
                         data-widget-id="health-reminders" 
                         x-show="!hiddenWidgets.includes('health-reminders')"
                         style="animation-delay: 0.7s;">
                         
                        <div class="widget-controls" x-show="editMode">
                            <button @@click="toggleWidget('health-reminders')" class="widget-control-btn">
                                <i class="fas fa-eye-slash text-xs"></i>
                            </button>
                        </div>
                        
                        <div class="widget-header" x-show="editMode">
                            <i class="fas fa-grip-vertical text-gray-400 mr-2"></i>
                            <span class="text-sm font-medium text-gray-600">Health Reminders Widget</span>
                        </div>
                        
                        <h2 class="text-lg font-display font-semibold text-gray-900 mb-4" :class="{ 'pt-2': editMode }">Health Reminders</h2>
                        
                        <div x-show="loading.healthReminders" class="text-center py-8">
                            <div class="loading-spinner mx-auto"></div>
                            <p class="text-gray-500 mt-2">Loading reminders...</p>
                        </div>
                        
                        <div x-show="!loading.healthReminders" class="space-y-3">
                            <template x-for="reminder in healthReminders" :key="reminder.id">
                                <div class="flex items-center justify-between p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                                    <div class="flex items-center space-x-3">
                                        <i :class="reminder.icon" class="text-yellow-600"></i>
                                        <div>
                                            <p class="text-sm font-medium text-yellow-900" x-text="reminder.pet"></p>
                                            <p class="text-xs text-yellow-800" x-text="reminder.task"></p>
                                        </div>
                                    </div>
                                    <span class="text-xs text-yellow-700" x-text="reminder.due"></span>
                                </div>
                            </template>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Quick Actions Modal -->
    <div x-show="showQuickActions" class="fixed inset-0 z-50 overflow-y-auto" x-cloak>
        <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" @@click="showQuickActions = false"></div>
            
            <div class="inline-block align-bottom bg-white rounded-2xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                <div class="bg-white px-6 pt-6 pb-4">
                    <div class="flex items-center justify-between mb-6">
                        <h3 class="text-lg font-display font-semibold text-gray-900">Quick Actions</h3>
                        <button @@click="showQuickActions = false" class="text-gray-400 hover:text-gray-600">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <template x-for="action in quickActions" :key="action.id">
                            <button class="flex flex-col items-center p-4 border border-gray-200 rounded-xl hover:border-pet-orange hover:bg-orange-50 transition-colors group">
                                <div :class="action.bgColor" class="w-12 h-12 rounded-xl flex items-center justify-center mb-3 group-hover:scale-105 transition-transform">
                                    <i :class="action.icon + ' ' + action.iconColor" class="text-xl"></i>
                                </div>
                                <span class="text-sm font-medium text-gray-900 text-center" x-text="action.label"></span>
                            </button>
                        </template>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<!-- SignalR -->
<script src="https://unpkg.com/@@microsoft/signalr@latest/dist/browser/signalr.min.js"></script>

<script>
function dashboard() {
    return {
        // State management
        showQuickActions: false,
        loading: {
            quickStats: true,
            pets: true,
            upcomingServices: true,
            recentActivity: true,
            weather: true,
            healthReminders: true
        },

        // Data properties
        quickStats: {},
        pets: [],
        upcomingServices: [],
        recentActivity: [],
        weather: {},
        healthReminders: [],
        
        // SignalR connection
        hubConnection: null,
        
        // Personalization properties
        currentTheme: 'light',
        widgetSize: 'expanded',
        editMode: false,
        hiddenWidgets: [],
        widgetOrder: ['pets-count', 'upcoming-services-count', 'average-rating', 'recent-activity', 'my-pets', 'weather', 'health-reminders'],
        sortableInstance: null,
        
        // === PHASE 3: SMART PERSONALIZATION ===
        
        // Usage tracking
        widgetInteractions: {},
        lastActiveTime: Date.now(),
        timeOfDayPreferences: {},
        weatherBasedLayout: false,
        quickActions: [
            {
                id: 1,
                label: 'Book Service',
                icon: 'fas fa-calendar-plus',
                iconColor: 'text-blue-600',
                bgColor: 'bg-blue-100'
            },
            {
                id: 2,
                label: 'Find Providers',
                icon: 'fas fa-search',
                iconColor: 'text-green-600',
                bgColor: 'bg-green-100'
            },
            {
                id: 3,
                label: 'Add Pet',
                icon: 'fas fa-plus',
                iconColor: 'text-purple-600',
                bgColor: 'bg-purple-100'
            },
            {
                id: 4,
                label: 'Messages',
                icon: 'fas fa-comment',
                iconColor: 'text-yellow-600',
                bgColor: 'bg-yellow-100'
            },
            {
                id: 5,
                label: 'Emergency',
                icon: 'fas fa-phone',
                iconColor: 'text-red-600',
                bgColor: 'bg-red-100'
            },
            {
                id: 6,
                label: 'Pet Profile',
                icon: 'fas fa-dog',
                iconColor: 'text-indigo-600',
                bgColor: 'bg-indigo-100'
            }
        ],

        // Initialization
        async init() {
            await this.loadPersonalizationSettings();
            this.setupSignalR();
            this.loadDashboardData();
            this.initializeDragAndDrop();
            this.initializeSmartPersonalization();
        },

        // Methods
        getTimeOfDay() {
            const hour = new Date().getHours();
            if (hour < 12) return 'morning';
            if (hour < 18) return 'afternoon';
            return 'evening';
        },

        async loadDashboardData() {
            // Load all dashboard sections with AJAX
            await Promise.all([
                this.loadQuickStats(),
                this.loadPets(),
                this.loadUpcomingServices(),
                this.loadRecentActivity(),
                this.loadWeatherData(),
                this.loadHealthReminders()
            ]);
        },

        async loadQuickStats() {
            try {
                this.loading.quickStats = true;
                const response = await fetch('/Dashboard/GetQuickStats');
                this.quickStats = await response.json();
            } catch (error) {
                console.error('Error loading quick stats:', error);
            } finally {
                this.loading.quickStats = false;
            }
        },

        async loadPets() {
            try {
                this.loading.pets = true;
                const response = await fetch('/Dashboard/GetPets');
                this.pets = await response.json();
            } catch (error) {
                console.error('Error loading pets:', error);
            } finally {
                this.loading.pets = false;
            }
        },

        async loadUpcomingServices() {
            try {
                this.loading.upcomingServices = true;
                const response = await fetch('/Dashboard/GetUpcomingServices');
                this.upcomingServices = await response.json();
            } catch (error) {
                console.error('Error loading upcoming services:', error);
            } finally {
                this.loading.upcomingServices = false;
            }
        },

        async loadRecentActivity() {
            try {
                this.loading.recentActivity = true;
                const response = await fetch('/Dashboard/GetRecentActivity');
                this.recentActivity = await response.json();
            } catch (error) {
                console.error('Error loading recent activity:', error);
            } finally {
                this.loading.recentActivity = false;
            }
        },

        async loadWeatherData() {
            try {
                this.loading.weather = true;
                const response = await fetch('/Dashboard/GetWeatherData');
                this.weather = await response.json();
            } catch (error) {
                console.error('Error loading weather data:', error);
            } finally {
                this.loading.weather = false;
            }
        },

        async loadHealthReminders() {
            try {
                this.loading.healthReminders = true;
                const response = await fetch('/Dashboard/GetHealthReminders');
                this.healthReminders = await response.json();
            } catch (error) {
                console.error('Error loading health reminders:', error);
            } finally {
                this.loading.healthReminders = false;
            }
        },

        // SignalR Methods
        setupSignalR() {
            this.hubConnection = new signalR.HubConnectionBuilder()
                .withUrl('/dashboardHub')
                .build();

            // Set up event handlers
            this.hubConnection.on('DashboardUpdate', (updateType, data) => {
                this.handleRealtimeUpdate(updateType, data);
            });

            this.hubConnection.on('BookingUpdate', (bookingData) => {
                this.handleBookingUpdate(bookingData);
            });

            this.hubConnection.on('HealthReminderUpdate', (reminderData) => {
                this.handleHealthReminderUpdate(reminderData);
            });

            // Start connection
            this.hubConnection.start()
                .then(() => {
                    console.log('Dashboard SignalR connected');
                })
                .catch(err => {
                    console.error('Error connecting to dashboard hub:', err);
                });

            // Handle disconnections
            this.hubConnection.onclose(() => {
                console.log('Dashboard SignalR disconnected');
                // Attempt to reconnect after 5 seconds
                setTimeout(() => {
                    this.hubConnection.start()
                        .catch(err => console.error('Error reconnecting:', err));
                }, 5000);
            });
        },

        handleRealtimeUpdate(updateType, data) {
            switch (updateType) {
                case 'quickStats':
                    this.quickStats = { ...this.quickStats, ...data };
                    break;
                case 'pets':
                    this.pets = data;
                    break;
                case 'upcomingServices':
                    this.upcomingServices = data;
                    break;
                case 'recentActivity':
                    this.recentActivity = [data, ...this.recentActivity.slice(0, 4)];
                    break;
                case 'weather':
                    this.weather = data;
                    break;
                case 'healthReminders':
                    this.healthReminders = data;
                    break;
            }
        },

        handleBookingUpdate(bookingData) {
            // Update upcoming services if this booking affects the current user
            if (bookingData.customerId === '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value') {
                this.loadUpcomingServices();
                this.loadQuickStats();
            }
        },

        handleHealthReminderUpdate(reminderData) {
            // Update health reminders
            this.loadHealthReminders();
        },

        // === PERSONALIZATION METHODS ===
        
        // Theme Management
        cycleTheme() {
            const themes = ['light', 'dark', 'pet'];
            const currentIndex = themes.indexOf(this.currentTheme);
            this.currentTheme = themes[(currentIndex + 1) % themes.length];
            this.applyTheme();
            this.savePersonalizationSettings();
            this.showNotification(`Switched to ${this.currentTheme} theme`, 'success');
        },

        applyTheme() {
            document.body.className = document.body.className.replace(/theme-\w+/, '');
            document.body.classList.add(`theme-${this.currentTheme}`);
        },

        getThemeIcon() {
            return {
                'light': 'fas fa-sun',
                'dark': 'fas fa-moon', 
                'pet': 'fas fa-paw'
            }[this.currentTheme];
        },

        getThemeIconClass() {
            return {
                'light': 'text-yellow-600',
                'dark': 'text-purple-600',
                'pet': 'text-orange-600'
            }[this.currentTheme];
        },

        // Widget Size Management
        toggleWidgetSize() {
            this.widgetSize = this.widgetSize === 'compact' ? 'expanded' : 'compact';
            this.savePersonalizationSettings();
            this.showNotification(`Widgets set to ${this.widgetSize} mode`, 'info');
        },

        // Edit Mode
        toggleEditMode() {
            this.editMode = !this.editMode;
            if (this.editMode) {
                this.showNotification('Customization mode enabled - drag widgets to reorder!', 'info');
            } else {
                this.showNotification('Customization saved!', 'success');
                this.savePersonalizationSettings();
            }
        },

        // Widget Visibility
        toggleWidget(widgetId) {
            const index = this.hiddenWidgets.indexOf(widgetId);
            if (index > -1) {
                this.hiddenWidgets.splice(index, 1);
            } else {
                this.hiddenWidgets.push(widgetId);
            }
            this.savePersonalizationSettings();
        },

        // Drag and Drop
        initializeDragAndDrop() {
            this.$nextTick(() => {
                const container = document.getElementById('quick-stats-container');
                if (container && window.Sortable) {
                    this.sortableInstance = new Sortable(container, {
                        animation: 150,
                        handle: '.widget-header',
                        onStart: () => {
                            document.body.classList.add('is-dragging');
                        },
                        onEnd: (evt) => {
                            document.body.classList.remove('is-dragging');
                            this.updateWidgetOrder();
                            this.savePersonalizationSettings();
                            this.showNotification('Widget order saved!', 'success');
                        }
                    });
                }
            });
        },

        updateWidgetOrder() {
            const container = document.getElementById('quick-stats-container');
            if (container) {
                const widgets = Array.from(container.children);
                this.widgetOrder = widgets.map(widget => widget.dataset.widgetId);
            }
        },

        // Persistence
        savePersonalizationSettings() {
            const settings = {
                theme: this.currentTheme,
                widgetSizes: { default: this.widgetSize }, // Convert single size to dictionary
                hiddenWidgets: this.hiddenWidgets,
                widgetOrder: this.widgetOrder
            };
            
            // Save to localStorage as backup
            localStorage.setItem('dashboardSettings', JSON.stringify(settings));
            
            // Save to server database
            this.saveDashboardPreferences(settings);
        },

        async loadPersonalizationSettings() {
            try {
                // Try to load from server first
                const serverSettings = await this.loadDashboardPreferences();
                if (serverSettings) {
                    this.currentTheme = serverSettings.theme || 'light';
                    this.widgetSize = serverSettings.widgetSizes?.default || 'expanded';
                    this.hiddenWidgets = serverSettings.hiddenWidgets || [];
                    this.widgetOrder = serverSettings.widgetOrder || ['pets-count', 'upcoming-services-count', 'average-rating', 'recent-activity', 'my-pets', 'weather', 'health-reminders'];
                    this.applyTheme();
                    this.showNotification('Dashboard preferences loaded from server', 'info');
                    return;
                }
            } catch (error) {
                console.log('Could not load preferences from server, falling back to localStorage:', error);
            }
            
            // Fallback to localStorage
            const saved = localStorage.getItem('dashboardSettings');
            if (saved) {
                const settings = JSON.parse(saved);
                this.currentTheme = settings.theme || 'light';
                this.widgetSize = settings.widgetSizes?.default || settings.widgetSize || 'expanded';
                this.hiddenWidgets = settings.hiddenWidgets || [];
                this.widgetOrder = settings.widgetOrder || ['pets-count', 'upcoming-services-count', 'average-rating', 'recent-activity', 'my-pets', 'weather', 'health-reminders'];
                this.applyTheme();
                this.showNotification('Dashboard preferences loaded from local storage', 'info');
            }
        },

        async loadDashboardPreferences() {
            try {
                const response = await fetch('/api/v1/Dashboard/preferences', {
                    method: 'GET',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.getAuthToken()}`
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const data = await response.json();
                console.log(`Loaded ${data.settingsCount} dashboard settings from server`);
                return data.preferences;
            } catch (error) {
                console.log('Failed to load preferences from server:', error);
                return null;
            }
        },

        async saveDashboardPreferences(settings) {
            try {
                const response = await fetch('/api/v1/Dashboard/preferences', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.getAuthToken()}`
                    },
                    body: JSON.stringify(settings)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const result = await response.json();
                console.log(`Saved ${result.savedSettings} dashboard settings to server`);
                return result;
            } catch (error) {
                console.log('Could not save preferences to server:', error);
                // Non-blocking - local storage still works
                throw error;
            }
        },

        getAuthToken() {
            // This would normally come from your authentication system
            // For now, return empty string as the server will use cookie authentication
            return '';
        },

        // Enhanced Notifications with Success Animations
        showNotification(message, type = 'info') {
            // Create notification element with enhanced styling
            const notification = document.createElement('div');
            notification.className = `fixed top-20 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transition-all duration-500 transform translate-x-full ripple-effect`;
            
            const colors = {
                'success': 'bg-gradient-to-r from-green-500 to-green-600 text-white',
                'info': 'bg-gradient-to-r from-blue-500 to-blue-600 text-white',
                'warning': 'bg-gradient-to-r from-yellow-500 to-yellow-600 text-white',
                'error': 'bg-gradient-to-r from-red-500 to-red-600 text-white'
            };
            
            const icons = {
                'success': '<i class="fas fa-check-circle mr-2 interactive-icon"></i>',
                'info': '<i class="fas fa-info-circle mr-2 interactive-icon"></i>',
                'warning': '<i class="fas fa-exclamation-triangle mr-2 interactive-icon"></i>',
                'error': '<i class="fas fa-times-circle mr-2 interactive-icon"></i>'
            };
            
            notification.className += ` ${colors[type] || colors.info}`;
            notification.innerHTML = `
                <div class="flex items-center">
                    ${icons[type] || icons.info}
                    <p class="font-medium">${message}</p>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            // Animate in with bounce
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
                notification.style.transform = 'translateX(0) scale(1.05)';
                
                setTimeout(() => {
                    notification.style.transform = 'translateX(0) scale(1)';
                }, 150);
            }, 100);
            
            // Add success ripple for success notifications
            if (type === 'success') {
                setTimeout(() => {
                    notification.classList.add('success');
                }, 200);
            }
            
            // Remove after 4 seconds with fade out
            setTimeout(() => {
                notification.style.transform = 'translateX(100%) scale(0.95)';
                notification.style.opacity = '0';
                
                setTimeout(() => {
                    if (notification.parentNode) {
                        document.body.removeChild(notification);
                    }
                }, 500);
            }, 4000);
        },

        // === PHASE 3: SMART PERSONALIZATION METHODS ===
        
        initializeSmartPersonalization() {
            this.loadUsageData();
            this.setupInteractionTracking();
            this.applyTimeBasedAdaptations();
            this.setupWeatherResponsiveUI();
        },

        // Usage Tracking
        loadUsageData() {
            const saved = localStorage.getItem('widgetUsageData');
            if (saved) {
                this.widgetInteractions = JSON.parse(saved);
            }
        },

        trackWidgetInteraction(widgetId) {
            if (!this.widgetInteractions[widgetId]) {
                this.widgetInteractions[widgetId] = {
                    clicks: 0,
                    views: 0,
                    timeSpent: 0,
                    lastUsed: Date.now(),
                    useFrequency: {}
                };
            }
            
            this.widgetInteractions[widgetId].clicks++;
            this.widgetInteractions[widgetId].lastUsed = Date.now();
            
            // Track time of day usage
            const hour = new Date().getHours();
            const timeSlot = hour < 12 ? 'morning' : hour < 18 ? 'afternoon' : 'evening';
            
            if (!this.widgetInteractions[widgetId].useFrequency[timeSlot]) {
                this.widgetInteractions[widgetId].useFrequency[timeSlot] = 0;
            }
            this.widgetInteractions[widgetId].useFrequency[timeSlot]++;
            
            this.saveUsageData();
            this.considerReorderingWidgets();
        },

        saveUsageData() {
            localStorage.setItem('widgetUsageData', JSON.stringify(this.widgetInteractions));
        },

        // Intelligent Widget Reordering
        considerReorderingWidgets() {
            const sortedWidgets = Object.entries(this.widgetInteractions)
                .sort((a, b) => {
                    // Priority scoring: recent usage + frequency + time relevance
                    const scoreA = this.calculateWidgetScore(a[1]);
                    const scoreB = this.calculateWidgetScore(b[1]);
                    return scoreB - scoreA;
                })
                .map(entry => entry[0]);
            
            // Only reorder if there's a significant difference
            if (this.shouldReorderWidgets(sortedWidgets)) {
                this.widgetOrder = [...sortedWidgets, ...this.widgetOrder.filter(w => !sortedWidgets.includes(w))];
                this.showNotification('Dashboard optimized based on your usage!', 'info');
            }
        },

        calculateWidgetScore(interactions) {
            const now = Date.now();
            const daysSinceLastUse = (now - interactions.lastUsed) / (1000 * 60 * 60 * 24);
            const currentTimeSlot = this.getTimeOfDay();
            
            // Base score from clicks and recency
            let score = interactions.clicks * Math.max(0, 10 - daysSinceLastUse);
            
            // Boost score if this widget is frequently used at current time
            if (interactions.useFrequency[currentTimeSlot]) {
                score += interactions.useFrequency[currentTimeSlot] * 5;
            }
            
            return score;
        },

        shouldReorderWidgets(newOrder) {
            // Only reorder if top 3 widgets are significantly different
            const currentTop3 = this.widgetOrder.slice(0, 3);
            const newTop3 = newOrder.slice(0, 3);
            
            return currentTop3.filter(w => !newTop3.includes(w)).length >= 2;
        },

        setupInteractionTracking() {
            // Track widget views and interactions
            this.$nextTick(() => {
                document.querySelectorAll('[data-widget-id]').forEach(widget => {
                    const widgetId = widget.dataset.widgetId;
                    
                    // Track clicks
                    widget.addEventListener('click', () => {
                        this.trackWidgetInteraction(widgetId);
                    });
                    
                    // Track time spent viewing (simplified)
                    const observer = new IntersectionObserver((entries) => {
                        entries.forEach(entry => {
                            if (entry.isIntersecting) {
                                if (!this.widgetInteractions[widgetId]) {
                                    this.widgetInteractions[widgetId] = { clicks: 0, views: 0, timeSpent: 0, lastUsed: Date.now(), useFrequency: {} };
                                }
                                this.widgetInteractions[widgetId].views++;
                            }
                        });
                    }, { threshold: 0.5 });
                    
                    observer.observe(widget);
                });
            });
        },

        // Time-based Adaptations
        applyTimeBasedAdaptations() {
            const timeOfDay = this.getTimeOfDay();
            
            // Auto-switch themes based on time
            if (this.currentTheme === 'light') {
                if (timeOfDay === 'evening' && new Date().getHours() >= 20) {
                    this.currentTheme = 'dark';
                    this.applyTheme();
                    this.showNotification('Switched to dark theme for evening comfort', 'info');
                }
            } else if (this.currentTheme === 'dark') {
                if (timeOfDay === 'morning' && new Date().getHours() >= 7) {
                    this.currentTheme = 'light';
                    this.applyTheme();
                    this.showNotification('Switched to light theme for daytime', 'info');
                }
            }
            
            // Adjust widget priorities based on time
            this.adjustWidgetPriorityByTime(timeOfDay);
        },

        adjustWidgetPriorityByTime(timeOfDay) {
            const timeBasedPriorities = {
                'morning': ['weather', 'health-reminders', 'upcoming-services-count'],
                'afternoon': ['my-pets', 'recent-activity', 'pets-count'],
                'evening': ['upcoming-services-count', 'recent-activity', 'weather']
            };
            
            const priorityWidgets = timeBasedPriorities[timeOfDay] || [];
            
            // Subtle reordering - only move highly relevant widgets up slightly
            priorityWidgets.forEach((widgetId, index) => {
                const currentIndex = this.widgetOrder.indexOf(widgetId);
                if (currentIndex > index + 2) {
                    // Move widget up in priority
                    this.widgetOrder = this.widgetOrder.filter(w => w !== widgetId);
                    this.widgetOrder.splice(index, 0, widgetId);
                }
            });
        },

        // Weather-responsive UI
        setupWeatherResponsiveUI() {
            // Adjust UI based on weather conditions
            if (this.weather && this.weather.condition) {
                this.applyWeatherBasedStyling(this.weather.condition, this.weather.temperature);
            }
        },

        applyWeatherBasedStyling(condition, temperature) {
            const body = document.body;
            
            // Remove existing weather classes
            body.className = body.className.replace(/weather-\w+/g, '');
            
            // Apply weather-specific styling
            if (condition.toLowerCase().includes('rain')) {
                body.classList.add('weather-rainy');
                if (!this.hiddenWidgets.includes('weather')) {
                    // Prioritize weather widget during rain
                    const weatherIndex = this.widgetOrder.indexOf('weather');
                    if (weatherIndex > 2) {
                        this.widgetOrder = this.widgetOrder.filter(w => w !== 'weather');
                        this.widgetOrder.splice(1, 0, 'weather');
                    }
                }
            } else if (condition.toLowerCase().includes('snow')) {
                body.classList.add('weather-snowy');
            } else if (temperature > 25) {
                body.classList.add('weather-hot');
            } else if (temperature < 5) {
                body.classList.add('weather-cold');
            } else {
                body.classList.add('weather-pleasant');
            }
        },

        // Smart Suggestions
        generateSmartSuggestions() {
            const suggestions = [];
            const now = new Date();
            const hour = now.getHours();
            
            // Time-based suggestions
            if (hour >= 7 && hour <= 9) {
                suggestions.push({
                    message: "Good morning! Perfect time to check your pets' health reminders",
                    action: () => this.scrollToWidget('health-reminders'),
                    type: 'info'
                });
            }
            
            // Weather-based suggestions
            if (this.weather && this.weather.temperature < 10) {
                suggestions.push({
                    message: "Cold weather ahead! Consider checking your pets' exercise schedule",
                    action: () => this.scrollToWidget('upcoming-services-count'),
                    type: 'warning'
                });
            }
            
            // Usage-based suggestions
            const leastUsedWidgets = Object.entries(this.widgetInteractions)
                .filter(([_, data]) => data.clicks < 2)
                .map(([widgetId, _]) => widgetId);
            
            if (leastUsedWidgets.length > 0) {
                suggestions.push({
                    message: `You might find the ${leastUsedWidgets[0].replace('-', ' ')} widget helpful`,
                    action: () => this.scrollToWidget(leastUsedWidgets[0]),
                    type: 'info'
                });
            }
            
            return suggestions;
        },

        scrollToWidget(widgetId) {
            const widget = document.querySelector(`[data-widget-id="${widgetId}"]`);
            if (widget) {
                widget.scrollIntoView({ behavior: 'smooth', block: 'center' });
                widget.classList.add('animate-pulse-glow');
                setTimeout(() => widget.classList.remove('animate-pulse-glow'), 2000);
            }
        }
    }
}
</script>
}